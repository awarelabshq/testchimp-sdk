name: CI/CD with TestChimp Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Your existing tests
  existing-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run existing test suite
        run: npm test
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

  # TestChimp AI repair (runs in parallel)
  testchimp-repair:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: TestChimp AI Repair
        id: testchimp
        uses: awarelabshq/testchimp-github-testrunner@v1.0.0
        with:
          api-key: ${{ secrets.TESTCHIMP_API_KEY }}
          project-id: ${{ secrets.TESTCHIMP_PROJECT_ID }}
          test-directory: 'tests'
          success-criteria: 'REPAIR_SUCCESS_WITH_CONFIDENCE'
          repair-confidence-threshold: '4'
          mode: 'RUN_WITH_AI_REPAIR'
          headless: 'true'
      
      - name: Upload repair results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: testchimp-results
          path: testchimp-artifacts/

  # Combined results and decision
  combined-results:
    needs: [existing-tests, testchimp-repair]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./existing-results
      
      - name: Download TestChimp results
        uses: actions/download-artifact@v4
        with:
          name: testchimp-results
          path: ./testchimp-results
      
      - name: Generate combined report
        run: |
          echo "# 🎯 Combined Test Results Report"
          echo ""
          echo "## 📊 Existing Test Suite"
          echo "- Results: Available in existing-results/"
          echo ""
          echo "## 🤖 TestChimp AI Repair Results"
          echo "- Status: ${{ needs.testchimp-repair.result }}"
          echo "- Tests Executed: ${{ needs.testchimp-repair.outputs.test-count }}"
          echo "- Tests Passed: ${{ needs.testchimp-repair.outputs.success-count }}"
          echo "- Tests Repaired: ${{ needs.testchimp-repair.outputs.repaired-count }}"
          echo ""
          echo "## 🔧 Repair Details"
          echo "- Above Threshold: ${{ needs.testchimp-repair.outputs.repaired-above-threshold }}"
          echo "- Below Threshold: ${{ needs.testchimp-repair.outputs.repaired-below-threshold }}"
          echo ""
          if [ "${{ needs.testchimp-repair.outputs.pull-request-number }}" != "" ]; then
            echo "## 📝 Repair Pull Request"
            echo "- PR Number: #${{ needs.testchimp-repair.outputs.pull-request-number }}"
            echo "- PR URL: ${{ needs.testchimp-repair.outputs.pull-request-url }}"
          fi
      
      - name: Determine overall status
        run: |
          # This is where you can implement custom logic
          # For example, fail only if both existing tests AND TestChimp fail
          
          if [ "${{ needs.existing-tests.result }}" == "failure" ] && [ "${{ needs.testchimp-repair.result }}" == "failure" ]; then
            echo "❌ Both existing tests and TestChimp repairs failed"
            exit 1
          elif [ "${{ needs.existing-tests.result }}" == "failure" ] && [ "${{ needs.testchimp-repair.result }}" == "success" ]; then
            echo "⚠️ Existing tests failed, but TestChimp repairs succeeded"
            # Don't fail the build if repairs were successful
          elif [ "${{ needs.existing-tests.result }}" == "success" ]; then
            echo "✅ Existing tests passed"
          else
            echo "🤖 TestChimp repairs handled the test failures"
          fi

  # Deployment (only if all checks pass)
  deploy:
    needs: [existing-tests, testchimp-repair, combined-results]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.combined-results.result == 'success'
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # Your deployment logic here
